SSS.ref.d30<-SS_output("C:/Users/Jason.Cope/Desktop/ASRP/SSS_example_ref/") #,covar=FALSE)
SSS.ref.d30<-SS_output("C:/Users/Jason.Cope/Desktop/ASRP/SSS_example_ref/",covar=FALSE)
SSS.ref.d30$natage
devtools::install_github("r4ss/r4ss", force = TRUE)
head(SSS.ref.d30$natage)
tail(SSS.ref.d30$natage)
devtools::install_github("r4ss/r4ss", force = TRUE)
slope<- -0.402214
intercept<-42.0705
x<-seq(1,100,0.05)
mat.vec<-1/(1+exp(slope*(x-intercept)))
mat.vec[mat.vec>0.95]
width.95per<-(x[mat.vec>0.95]-intercept)[1]
width.95per
SSS.ref.d30.test<-SS_output("C:/Users/Jason.Cope/Desktop/ASRP/SSS_example_ref_test/") #,covar=FALSE)
mod.names <- c("SAD","SAD test")
mod.cols  <- rich.colors(length(mod.names))
base.summary <- SSsummarize(list(SSS.ref.d30,SSS.ref.d30.test))
SSplotComparisons(base.summary, plot=TRUE, print=TRUE, plotdir=dir,
spacepoints=20,  # years between points on each line
initpoint=0,     # "first" year of points (modular arithmetic)
staggerpoints=0, # points aligned across models
endyrvec=2028,   # final year to show in time series
legendlabels=mod.names, filenameprefix="base_", col=mod.cols)
SSplotSelex(SSS.ref.d30)
install.packages("devtools")
devtools::install_github("r4ss/r4ss")
install.packages("devtools")
SSplotSelex(SSS.ref.d30)
library(r4ss)
SSplotSelex(SSS.ref.d30)
remove.packages("r4ss", lib="~/R/R-3.4.2/library")
install.packages("devtools")
devtools::install_github("r4ss/r4ss")
install.packages("devtools")
library(r4ss)
devtools::install_github("r4ss/r4ss")
library("r4ss", lib.loc="~/R/R-3.4.2/library")
dir<-"C:/Users/Jason.Cope/Desktop/ASRP"
SSS.ref.d30<-SS_output("C:/Users/Jason.Cope/Desktop/ASRP/SSS_example_ref/") #,covar=FALSE)
SSS.ref.d30.test<-SS_output("C:/Users/Jason.Cope/Desktop/ASRP/SSS_example_ref_test/") #,covar=FALSE)
mod.names <- c("SAD","SAD test")
mod.cols  <- rich.colors(length(mod.names))
base.summary <- SSsummarize(list(SSS.ref.d30,SSS.ref.d30.test))
SSplotComparisons(base.summary, plot=TRUE, print=TRUE, plotdir=dir,
spacepoints=20,  # years between points on each line
initpoint=0,     # "first" year of points (modular arithmetic)
staggerpoints=0, # points aligned across models
endyrvec=2028,   # final year to show in time series
legendlabels=mod.names, filenameprefix="base_", col=mod.cols)
SSS.ref.d30.test<-SS_output("C:/Users/Jason.Cope/Desktop/ASRP/SSS_example_ref_test/") #,covar=FALSE)
mod.names <- c("SAD","SAD test")
mod.cols  <- rich.colors(length(mod.names))
library("gplots", lib.loc="~/R/R-3.4.2/library")
mod.names <- c("SAD","SAD test")
mod.cols  <- rich.colors(length(mod.names))
base.summary <- SSsummarize(list(SSS.ref.d30,SSS.ref.d30.test))
SSplotComparisons(base.summary, plot=TRUE, print=TRUE, plotdir=dir,
spacepoints=20,  # years between points on each line
initpoint=0,     # "first" year of points (modular arithmetic)
staggerpoints=0, # points aligned across models
endyrvec=2028,   # final year to show in time series
legendlabels=mod.names, filenameprefix="base_", col=mod.cols)
74.86*2*12
37.32*2*12
1225-45
1225-45-900
1240+280
OFL_buffer<-function(sigma)
{
P_star<-c(0.35,0.4,0.45,0.5)
OFL.dist<-rnorm(1000000,1000,1000*sigma)
hist(OFL.dist,col="orange",xlab="OFL",main="")
abline(v=quantile(OFL.dist,probs=P_star),lwd=4,lty=c(2,2,2,1),col=c(rainbow(3),"black"))
legend("topright",c("P* = 0.35","P* = 0.40","P* = 0.45","P* = 0.50"),lty=c(2,2,2,1),col=c(rainbow(3),"black"),lwd=2,bty="n",title=paste0("sigma=",sigma))
return(round(quantile(OFL.dist,probs=P_star)/1000,3))
}
OFL_buffer(1.44)
Dir.in<-"C:/Users/Jason.Cope/Desktop/SSS-ALB-Maite/"
POP.SSS.BH<-SSS(filepath=paste(Dir.in,"/Jason",sep=""),
file.name=c("ALB-NAO.dat","ALB-NAO.ctl"),
reps=1000,
seed.in=19,
M.in=c(0,0.3,0.1,0,0.3,0.1),
Dep.in=c(10,0.4,0.1),
SR_type=3, # BH?
h.in=c(10,0.9,0.1), #option 10 is rtnorm
FMSY_M.in=c(-30,0.8,0.2),
BMSY_B0.in=c(-2,0.4,0.05),
L1.in=c(0,0,0,0),
Linf.in=c(0,0,0,0),
k.in=c(0,0,0,0),
Zfrac.Beta.in=c(-99,0.2,0.6,-99,0.5,2),
R_start=c(0,10),
sum_age=0,
sb_ofl_yrs=c(2012,2012,2013),
f_yr=2011,
year0=1930,
genders=F)
library(calibrate)
library(gplots)
library(fields)
recode.simple <- function(Codes.Old, Table)
{
# Table[Old, New]; Codes.New is result
Table[,2][match(Codes.Old,  Table[,1])]
}
#For IEA 2015
quad.plot.WC<-read.csv("D:/JMC/Desktop/Current projects/IEA/IEA status/Quadplot/2017/WC_quadplot_2017.csv")
par(mar=c(5,5,4,2))
#col.yrs<-rich.colors(length(unique(quad.plot.WC.2015$Assessment_Year)))
quad.plot.WC<-read.csv("D:/JMC/Desktop/2017/WC_quadplot_2017.csv")
quad.plot.WC<-read.csv("C:/JMC/Desktop/2017/WC_quadplot_2017.csv")
quad.plot.WC<-read.csv("C:/Users/Jason.Cope/Desktop/2017/WC_quadplot_2017.csv")
par(mar=c(5,5,4,2))
col.yrs<-rainbow(length(unique(quad.plot.WC$Assessment_Year)))
col.yrs.plot<-recode.simple(quad.plot.WC$Assessment_Year,cbind(sort(unique(quad.plot.WC$Assessment_Year)),col.yrs))
plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold(SO[terminal]/SO["MSY proxy"])),
ylab=expression(bold(F[terminal]/F["MSY proxy"])),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
quad.plot.WC<-read.csv("C:/Users/Jason.Cope/Desktop/2017/WC_quadplot_2017.csv")
par(mar=c(5,5.5,4,2))
#col.yrs<-rich.colors(length(unique(quad.plot.WC.2015$Assessment_Year)))
col.yrs<-rainbow(length(unique(quad.plot.WC$Assessment_Year)))
#Colors by year
col.yrs.plot<-recode.simple(quad.plot.WC$Assessment_Year,cbind(sort(unique(quad.plot.WC$Assessment_Year)),col.yrs))
#Colors by species group
col.yrs.plot<-recode.simple(quad.plot.WC$pch_spp,cbind(sort(unique(quad.plot.WC$pch_spp)),c("white","gray","black")))
plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold(SO[terminal]/SO["MSY proxy"])),
ylab=expression(bold(F[terminal]/F["MSY proxy"])),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
library(calibrate)
library(gplots)
library(fields)
recode.simple <- function(Codes.Old, Table)
{
# Table[Old, New]; Codes.New is result
Table[,2][match(Codes.Old,  Table[,1])]
}
install.packages("fileds")
install.packages("fields")
library(calibrate)
library(gplots)
library(fields)
recode.simple <- function(Codes.Old, Table)
{
# Table[Old, New]; Codes.New is result
Table[,2][match(Codes.Old,  Table[,1])]
}
quad.plot.WC<-read.csv("C:/Users/Jason.Cope/Desktop/2017/WC_quadplot_2017.csv")
head(quad.plot.WC)
plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold("Relative Stock Status")),
ylab=expression(bold("Relative Fishing Intensity")),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
quad.plot.WC<-read.csv("C:/Users/Jason.Cope/Desktop/2017/WC_quadplot_2017.csv")
par(mar=c(5,5.5,4,2))
#col.yrs<-rich.colors(length(unique(quad.plot.WC.2015$Assessment_Year)))
col.yrs<-rainbow(length(unique(quad.plot.WC$Assessment_Year)))
#Colors by year
col.yrs.plot<-recode.simple(quad.plot.WC$Assessment_Year,cbind(sort(unique(quad.plot.WC$Assessment_Year)),col.yrs))
#Colors by species group
col.yrs.plot<-recode.simple(quad.plot.WC$pch_spp,cbind(sort(unique(quad.plot.WC$pch_spp)),c("white","gray","black")))
#plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold(SO[terminal]/SO["MSY proxy"])),
#        ylab=expression(bold(F[terminal]/F["MSY proxy"])),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
#        col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold("Relative Stock Status")),
ylab=expression(bold("Relative Fishing Intensity")),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
#abline(v=0.625,col="red",lwd=3,lty=1)
#abline(v=0.5,col="purple",lwd=3,lty=1)
abline(v=1,col="black",lwd=1,lty=2)
rect(0.99,1.2,1.01,1.4,col="white",border=NA)
text(1,1.3,"TRP",srt=90)
abline(v=0.625,col="red",lwd=2,lty=1)
rect(0.615,1.1,0.635,1.48,col="white",border=NA)
text(0.625,1.3,"LRP:rockfish",srt=90)
abline(v=0.5,col="red",lwd=2,lty=1)
rect(0.49,1.1,0.51,1.48,col="white",border=NA)
text(0.5,1.3,"LRP:flatfish",srt=90)
abline(h=1,col="black",lwd=1,lty=2)
points(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=0.5)
identify(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,quad.plot.WC$Abb1,cex= 0.75)
library(calibrate)
library(gplots)
library(fields)
recode.simple <- function(Codes.Old, Table)
{
# Table[Old, New]; Codes.New is result
Table[,2][match(Codes.Old,  Table[,1])]
}
#For IEA 2017
#quad.plot.WC<-read.csv("D:/JMC/Documents/Current projects/IEA/IEA status/Quadplot/2017/WC_quadplot_2017.csv")
quad.plot.WC<-read.csv("C:/Users/Jason.Cope/Desktop/2017/WC_quadplot_2017.csv")
par(mar=c(5,5.5,4,2))
#col.yrs<-rich.colors(length(unique(quad.plot.WC.2015$Assessment_Year)))
col.yrs<-rainbow(length(unique(quad.plot.WC$Assessment_Year)))
#Colors by year
col.yrs.plot<-recode.simple(quad.plot.WC$Assessment_Year,cbind(sort(unique(quad.plot.WC$Assessment_Year)),col.yrs))
#Colors by species group
col.yrs.plot<-recode.simple(quad.plot.WC$pch_spp,cbind(sort(unique(quad.plot.WC$pch_spp)),c("white","gray","black")))
#plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold(SO[terminal]/SO["MSY proxy"])),
#        ylab=expression(bold(F[terminal]/F["MSY proxy"])),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
#        col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold("Relative Stock Status")),
ylab=expression(bold("Relative Fishing Intensity")),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
#abline(v=0.625,col="red",lwd=3,lty=1)
#abline(v=0.5,col="purple",lwd=3,lty=1)
abline(v=1,col="black",lwd=1,lty=2)
rect(0.99,1.2,1.01,1.4,col="white",border=NA)
text(1,1.3,"TRP",srt=90)
abline(v=0.625,col="red",lwd=2,lty=1)
rect(0.615,1.1,0.635,1.48,col="white",border=NA)
text(0.625,1.3,"LRP:rockfish",srt=90)
abline(v=0.5,col="red",lwd=2,lty=1)
rect(0.49,1.1,0.51,1.48,col="white",border=NA)
text(0.5,1.3,"LRP:flatfish",srt=90)
abline(h=1,col="black",lwd=1,lty=2)
points(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=0.5)
identify(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,quad.plot.WC$Abb1,cex= 0.75)
identify(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,quad.plot.WC$Abb1,cex= 0.75)
quad.plot.WC<-read.csv("C:/Users/Jason.Cope/Desktop/2017/WC_quadplot_2017.csv")
par(mar=c(5,5.5,4,2))
#col.yrs<-rich.colors(length(unique(quad.plot.WC.2015$Assessment_Year)))
col.yrs<-rainbow(length(unique(quad.plot.WC$Assessment_Year)))
#Colors by year
col.yrs.plot<-recode.simple(quad.plot.WC$Assessment_Year,cbind(sort(unique(quad.plot.WC$Assessment_Year)),col.yrs))
#Colors by species group
col.yrs.plot<-recode.simple(quad.plot.WC$pch_spp,cbind(sort(unique(quad.plot.WC$pch_spp)),c("white","gray","black")))
#plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold(SO[terminal]/SO["MSY proxy"])),
#        ylab=expression(bold(F[terminal]/F["MSY proxy"])),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
#        col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
plot(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,xlim=c(0,3.5),ylim=c(0,1.5),xlab=expression(bold("Relative Stock Status")),
ylab=expression(bold("Relative Fishing Intensity")),pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=1.5,font.lab = 2)
#abline(v=0.625,col="red",lwd=3,lty=1)
#abline(v=0.5,col="purple",lwd=3,lty=1)
abline(v=1,col="black",lwd=1,lty=2)
rect(0.99,1.2,1.01,1.4,col="white",border=NA)
text(1,1.3,"TRP",srt=90)
abline(v=0.625,col="red",lwd=2,lty=1)
rect(0.615,1.1,0.635,1.48,col="white",border=NA)
text(0.625,1.3,"LRP:rockfish",srt=90)
abline(v=0.5,col="red",lwd=2,lty=1)
rect(0.49,1.1,0.51,1.48,col="white",border=NA)
text(0.5,1.3,"LRP:flatfish",srt=90)
abline(h=1,col="black",lwd=1,lty=2)
points(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,pch=quad.plot.WC$pch_spp,bg=col.yrs.plot,
col="black",cex=1.1,cex.lab=0.5)
identify(quad.plot.WC$B.Bmsy,quad.plot.WC$F.Fmsy,quad.plot.WC$Abb1,cex= 0.75)
# plot.nums<-abs(quad.plot.WC.2015$x_adj)+abs(quad.plot.WC.2015$y_adj)==0
# replot.nums<-abs(quad.plot.WC.2015$x_adj)+abs(quad.plot.WC.2015$y_adj)>0
# name.cex=1.3
# #textxy(quad.plot.WC.2014$B.Bmsy,quad.plot.WC.2014$TM_ABC,quad.plot.WC.2014$Abb2, cex=name.cex,offset=0.7,adj=WC.2014$)
# textxy(quad.plot.WC.2015$B.Bmsy[plot.nums],quad.plot.WC.2015$TM_ABC[plot.nums],quad.plot.WC.2015$Abb2[plot.nums], cex = name.cex)
# text(quad.plot.WC.2015$B.Bmsy[replot.nums]+quad.plot.WC.2015$x_adj[replot.nums],
#     quad.plot.WC.2015$TM_ABC[replot.nums]+quad.plot.WC.2015$y_adj[replot.nums],
legend("topright",c("Flatfishes","Scorpaenids","Other"),pch=c(22,24,21),col="black",pt.bg=c("gray","black","white"),bty="n",cex=1.25)
M.draw
?par
shiny::runApp('GitHub/Natural-Mortality-Tool')
(1-0.01)/1
(0.1-1)/1
(0.1-1)/0.1
(1-0.5)/0.5
(0.01-0.5)/0.5
(1-0.1/0.1
(1-0.1)/0.1
(1-0.2)/0.2
(1-0.6)/0.6
(0.01-0.6)/0.6
(0.01-0.6)/0.6
(1-0.6)/0.6
(1000-500)/500
(2000-500)/500
(10000-500)/500
(1-500)/500
(0-500)/500
Snap_ex<-Plot_taxa( Search_species(Genus="Lutjanus",Species="campechanus")$match_taxonomy, mfrow=c(2,2) )
library(FishLife)
Snap_ex<-Plot_taxa( Search_species(Genus="Lutjanus",Species="campechanus")$match_taxonomy, mfrow=c(2,2) )
install.packages(c("backports", "BH", "bindr", "bindrcpp", "car", "chron", "cluster", "curl", "data.table", "DBI", "devtools", "digest", "DLMtool", "dunn.test", "epitools", "fields", "foreach", "fpc", "FSA", "GenSA", "git2r", "glue", "gmm", "htmlwidgets", "httpuv", "iterators", "knitr", "lazyeval", "lme4", "lmtest", "mapdata", "maps", "MASS", "Matrix", "mclust", "mgcv", "msm", "mvtnorm", "nlme", "openssl", "packrat", "plogr", "plotrix", "propagate", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "rsconnect", "shape", "shinyjs", "spam", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyselect", "TMB", "TropFishR", "truncnorm", "viridisLite", "withr", "yaml", "zoo"))
library(FishLife)
Snap_ex<-Plot_taxa( Search_species(Genus="Lutjanus",Species="campechanus")$match_taxonomy, mfrow=c(2,2) )
library("FishLife", lib.loc="~/R/R-3.4.2/library")
Snap_ex<-Plot_taxa( Search_species(Genus="Lutjanus",Species="campechanus")$match_taxonomy, mfrow=c(2,2) )
devtools::install_github("james-thorson/FishLife")
library(FishLife)
Snap_ex<-Plot_taxa( Search_species(Genus="Lutjanus",Species="campechanus")$match_taxonomy, mfrow=c(2,2) )
median_M<-exp(Snap_ex[[1]]$Mean_pred[6])
median_M
Snap_ex<-Plot_taxa( Search_species(Genus="Sebastes",Species="mystinus")$match_taxonomy, mfrow=c(2,2) )
BRF_ex<-Plot_taxa( Search_species(Genus="Sebastes",Species="mystinus")$match_taxonomy, mfrow=c(2,2) )
BRF_ex[[1]]$Mean_pred
median_K<-exp(BRF_ex[[1]]$Mean_pred[2])
median_K
median_M<-exp(BRF_ex[[1]]$Mean_pred[6])
median_M
median_M/median_K
shiny::runApp('GitHub/Shiny_DLMtool')
1450-1225-220
7500*10
7500*12
runApp('C:/Users/Jason.Cope/Desktop/Natural-Mortality-Tool')
runApp('C:/Users/Jason.Cope/Desktop/Natural-Mortality-Tool')
runApp('C:/Users/Jason.Cope/Desktop/Natural-Mortality-Tool')
runApp('C:/Users/Jason.Cope/Desktop/Natural-Mortality-Tool')
runApp('C:/Users/Jason.Cope/Desktop/Natural-Mortality-Tool')
runApp('C:/Users/Jason.Cope/Desktop/Natural-Mortality-Tool')
runApp('C:/Users/Jason.Cope/Desktop/Natural-Mortality-Tool')
40000*1.011
40000*1.101
40000*1.088
40000*1.079
40000*1.084
44040-43360
40000*1.088
44040-43520
library()
library(DLMtool)
avail("Observation")
avail("Obs")
Generic_Obs
names(Generic_Obs)
ourstock <- Snapper
ourfleet <- Generic_FlatE
ourOM <- new('OM',ourstock, ourfleet, Imprecise_Biased)
names(ourOM@Cobs)
names(ourOM@Obs)
ourOM
attributes(Generic_FlatE)
namess(Generic_FlatE)
names(Generic_FlatE)
levels(Generic_FlatE)
names(ourOM@OM)
slotNames(Generic_FlatE)
slotNames(Imprecise_Biased)
avail("Obs")
slotNames(Generic_Obs)
slotNames(Precise_Unbiased)
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
slotNames(Precise_Unbiased)
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
detach("package:DLMtool", unload=TRUE)
library("DLMtool", lib.loc="~/R/R-3.4.2/library")
Imprecise_Biased
Obs
Avail(Obs)
Avail("Obs")
avail("Obs")
Generic_Obs
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Shiny_DLMtool')
library(FishLife)
BRF_ex<-Plot_taxa( Search_species(Genus="Sebastes",Species="mystinus")$match_taxonomy, mfrow=c(2,2) )
BRF_ex
median_M<-exp(BRF_ex[[1]]$Mean_pred[6])
median_M
mean_M<-exp(BRF_ex[[1]]$Mean_pred[6]+diag(BRF_ex[[1]]$Cov_pred/2)[6])
mean_M
log_sd<-sqrt(diag(BRF_ex[[1]]$Cov_pred)[6])
log_sd
runApp('GitHub/Natural-Mortality-Tool')
runApp('GitHub/Natural-Mortality-Tool')
shiny::runApp('GitHub/Natural-Mortality-Tool')
130*0.9
runApp('GitHub/Natural-Mortality-Tool')
runApp('GitHub/Shiny_DLMtool')
runApp('GitHub/Natural-Mortality-Tool')
runApp('GitHub/Natural-Mortality-Tool')
runApp('GitHub/Natural-Mortality-Tool')
runApp('GitHub/Shiny_DLMtool')
avail('Data')
setwd("C:/Users/Jason.Cope/Documents/GitHub/Shiny_DLMtool/")
Ex_dlm.data<-new("Data",stock="DLM_objects_examples/Example_datafile.csv")
avail('Data')
China_rockfish
China_rockfish@Year
setwd("C:/Users/Jason.Cope/Documents/GitHub/Shiny_DLMtool/")
Ex_dlm.data<-new("Data",stock="DLM_objects_examples/Example_datafile.csv")
Ex_dlm.data
Ex_dlm.data
slotNames(Ex_dlm.data) #checks object inputs
summary(Ex_dlm.data) #Plots summary of removals, abundnace indices and input priors
Can(Ex_dlm.data)   #Methods that can be used
slotNames(Ex_dlm.data) #checks object inputs
China_rockfish@CAA
Ex_dlm.data@CAA
Can(Ex_dlm.data)   #Methods that can be used
Cant(Ex_dlm.data)  #Methods that cannot be use
Needed(Ex_dlm.data) #What data needed for each "cant" method
Ex_dlm.data.TAC<-TAC(Ex_dlm.data)
plot(Ex_dlm.data.TAC)
plot(Ex_dlm.data.TAC)
boxplot(t(Ex_dlm.data.TAC@TAC[,,1]),horizontal=TRUE,ylim=c(0,250),axes=F,xlab="Total Allowable Catches",ylab="")
box()
axis(1)
axis(2,at=c(1:length(Ex_dlm.data.TAC@MPs)),labels= Ex_dlm.data.TAC@MPs,las=2)
runApp()
summary(Ex_dlm.data) #Plots summary of removals, abundnace indices and input priors
runApp()
runApp()
runApp()
runApp()
runApp()
?melt
runApp()
runApp()
runApp()
runApp()
runApp()
Ex_dlm.data<-new("DLM_data",stock="C:/Users/Jason.Cope/Documents/GitHub/Data-limited-tools/Shiny_DLMtool/DLM_objects_examples/Example_datafile.csv")
Itarget1(x=1, Ex_dlm.data, reps = 100, yrsmth = 5, xx=0, Imulti=1.5)
?Itarget1
Itarget1(x=1, Ex_dlm.data, reps = 100, yrsmth = 5, xx=0, Imulti=1.5)
ItargetE1(x=1, Ex_dlm.data, reps = 100, yrsmth = 5, xx = 1, Imulti = 1.5)
slotNames(Ex_dlm.data)
Ex_dlm.data@Cat
runApp()
Itarget1
ORCS_refined<-function(x,Data,reps=100,stock.cat=3)
{
Ct.in<-mapply(function(xx) rlnorm(reps,log(Data@Cat[x,xx]),Data@CV_Cat),xx=1:length(Data@Cat[1,]))
scalar<-c(2,1.22,0.41)
apply(Ct.in,1,quantile,0.1)*scalar[stock.cat]
}
class(ORCS_refined)<-"Output"
environment(ORCS_refined) <- asNamespace('DLMtool')
sapply(1,ORCS_refined,Red_snapper,reps=5,stock.cat=1)
runApp()
runApp()
runApp()
ORCS_refined<-function(x,Data,reps=100,stock.cat=3)
{
Ct.in<-mapply(function(xx) rlnorm(reps,log(Data@Cat[x,xx]),Data@CV_Cat),xx=1:length(Data@Cat[1,]))
scalar<-c(2,1.22,0.41)
ptile<-c(0.9,0.25,0.1)
apply(Ct.in,1,quantile,ptile[stock.cat])*scalar[stock.cat]
}
class(ORCS_refined)<-"Output"
environment(ORCS_refined) <- asNamespace('DLMtool')
class(DBSRA)
ORCS_refined<-function(x,Data,reps=100,stock.cat=3)
{
Ct.in<-mapply(function(xx) rlnorm(reps,log(Data@Cat[x,xx]),Data@CV_Cat),xx=1:length(Data@Cat[1,]))
scalar<-c(2,1.22,0.41)
ptile<-c(0.9,0.25,0.1)
apply(Ct.in,1,quantile,ptile[stock.cat])*scalar[stock.cat]
}
class(ORCS_refined)<-"MP"
environment(ORCS_refined) <- asNamespace('DLMtool')
runApp()
sapply(1,ORCS_refined,Red_snapper,reps=5,stock.cat=1)
runApp()
ORCS_refined<-function(x,Data,reps=100,stock.cat=3)
{
Ct.in<-mapply(function(xx) rlnorm(reps,log(Data@Cat[x,xx]),Data@CV_Cat),xx=1:length(Data@Cat[1,]))
scalar<-c(2,1.22,0.41)
apply(Ct.in,1,quantile,0.1)*scalar[stock.cat]
}
class(ORCS_refined)<-"MP"
sfExport("ORCS_refined")
class(ORCS_refined)<-"MP"
ORCS_refined(1,Red_snapper,reps=5,stock.cat=1)
Avail(MP)
avail(MP)
runApp()
avail(MP)
sfExport("ORCS_refined")
THC<-function(x, Data, reps){
THCpos<-order(Data@Cat[x,],decreasing=T)[3]
THCmu<-Data@Cat[x,THCpos]
Rec <- new("Rec")
Rec@TAC <- THCmu * exp(rnorm(reps, -0.1^2/2, 0.1))
Rec
}
class(THC)<-"MP"
sfExport('THC')
avail(MP)
runApp()
ORCS_refined<-function(x,Data,reps=100,stock.cat=3)
{
Ct.in<-mapply(function(xx) rlnorm(reps,log(Data@Cat[x,xx]),Data@CV_Cat),xx=1:length(Data@Cat[1,]))
scalar<-c(2,1.22,0.41)
Orcs_ref_out<-apply(Ct.in,1,quantile,0.1)*scalar[stock.cat]
Orcs_ref_out
}
class(ORCS_refined)<-"MP"
ORCS_refined(1,Red_snapper,reps=5,stock.cat=1)
runApp()
library(DLMtool)
avail(MP)
THC
library("DLMtool", lib.loc="~/R/R-3.4.2/library")
THC
avail(MP)
install.packages(c("htmlwidgets", "survival"))
remove.packages("DLMtool", lib="~/R/R-3.4.2/library")
install.packages("DLMtool")
library("DLMtool", lib.loc="~/R/R-3.4.2/library")
avail(MP)
