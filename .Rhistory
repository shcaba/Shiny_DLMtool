geom_line(aes(x=X, y=Value, color=Fleet), lwd=2) +
facet_wrap(~Variable, scale="free_y") +
xlab("Age")
##----------------------------------------------------------------
## Step 3: Run LIME
##----------------------------------------------------------------
## Single year only
data_list <- list("years"=2016, "LF"=lf)
input_data <- create_inputs(lh=lh, input_data=data_list)
LFlist <- list()
LFlist[[1]] <- matrix(input_data$LF[,,1], nrow=length(input_data$years))
colnames(LFlist[[1]]) <- input_data$highs
rownames(LFlist[[1]]) <- input_data$years
LFdf <- LFreq_df(LFlist)
plot_LCfits(LF_df=LFdf)
res <- run_LIME(modpath=NULL, input=input_data, data_avail="LC", Rdet=TRUE)
## check TMB inputs
Inputs <- res$Inputs
## Report file
Report <- res$Report
## Standard error report
Sdreport <- res$Sdreport
## check convergence
hessian <- Sdreport$pdHess
gradient <- res$opt$max_gradient <= 0.001
hessian == TRUE & gradient == TRUE
##----------------------------------------------------------------
## Step 4: Examine output
##----------------------------------------------------------------
## SPR
spr <- Report$SPR_t
## standard error
sd_spr <- summary(Sdreport)[which(rownames(summary(Sdreport))=="SPR_t"),2]
## lower confidence limit
lcl_spr <- max(0,spr - 1.96 * sd_spr)
## upper confidence limit
ucl_spr <- spr + 1.96 * sd_spr
save <- data.frame("model"="LIME", "run"="singleyear", "spr"=spr, "lcl_spr"=lcl_spr, "ucl_spr"=ucl_spr)
F50 <- with(lh, uniroot(f=calc_ref, lower=0, upper=3, ages=ages, Mat_a=Mat_a, W_a=W_a, M=M, S_fa=Report$S_fa, ref=0.5))$root
Report$F_y/F50
(1-spr)/(1-F50)
Report$D_t
## plot length composition data and fits
plot_LCfits(Inputs=Inputs,
Report=Report)
abline(v=lh$linf, col="red", lwd=2, lty=2)
## plot model output
plot_output(Inputs=Inputs,
Report=Report,
Sdreport=Sdreport,
lh=lh,
plot="Selex")
abline(v=lh$linf, lwd=2, lty=2, col="red")
abline(v=Report$ML_ft[length(Report$ML_ft)], lwd=2, lty=2, col="blue")
legend("topleft", legend=c("Selectivity", "Mean length in catch", "Linf"), col=c("#00AA00", "blue", "red"), lty=c(1,2,2), lwd=2)
##----------------------------------------------------------------
## *** LB-SPR, single year, single fleet
##----------------------------------------------------------------
library(LBSPR)
##----------------------------------------------------------------
## Step 1: Read in length data
##----------------------------------------------------------------
LB_lengths <- new("LB_lengths")
LB_lengths@LMids <- data[,1]
LB_lengths@LData <- matrix(data[,2], ncol=1)
LB_lengths@Years <- 2016
LB_lengths@NYears <- 1
##----------------------------------------------------------------
## Step 2: Specify biological inputs and parameter starting values
##----------------------------------------------------------------
LB_pars <- new("LB_pars")
LB_pars@MK <- 1
LB_pars@Linf <- lh$linf
LB_pars@L50 <- lh$ML50
LB_pars@L95 <- lh$ML95
LB_pars@CVLinf <- 0.1
LB_pars@FecB <- 3
LB_pars@Mpow <- 0
LB_pars@Walpha <- lh$lwa
LB_pars@Wbeta <- lh$lwb
LB_pars@BinWidth <- lh$binwidth
##----------------------------------------------------------------
## Step 3: Run LBSPR
##----------------------------------------------------------------
lbspr_res <- LBSPRfit(LB_pars=LB_pars, LB_lengths=LB_lengths, Control=list(modtype=c("GTG")))
##----------------------------------------------------------------
## Step 4: Examine output and compare
##----------------------------------------------------------------
spr <- lbspr_res@SPR
sd_spr <- sqrt(lbspr_res@Vars[1,"SPR"])
## lower confidence limit
lcl_spr <- max(0,spr - 1.96 * sd_spr)
## upper confidence limit
ucl_spr <- spr + 1.96 * sd_spr
save <- rbind.data.frame(save, data.frame("model"="LBSPR", "run"="singleyear", "spr"=spr, "lcl_spr"=lcl_spr, "ucl_spr"=ucl_spr))
ggplot(save) +
geom_point(aes(x=run, y=spr, color=model), cex=5) +
geom_linerange(aes(x=run, ymin=lcl_spr, ymax=ucl_spr, color=model)) +
ylim(c(0,max(ucl_spr))) +
xlab("Run") + ylab("SPR")
## plot length composition data and fits
plot_LCfits(Inputs=Inputs,
Report=Report,
LBSPR=lbspr_res)
abline(v=lh$linf, lwd=2, lty=2, col="red")
## plot model output
plot_output(Inputs=Inputs,
Report=Report,
Sdreport=Sdreport,
LBSPR=lbspr_res,
lh=lh,
true_years=data_list$years,
plot=c("Selex"))
abline(v=lh$linf, lwd=2, lty=2, col="red")
abline(v=Report$ML_ft[length(Report$ML_ft)], lwd=2, lty=2, col="blue")
legend("topleft", legend=c("LIME Selectivity", "LBSPR Selectivity", "Mean length in catch", "Linf"), col=c("#00AA00", "#AA00AA", "blue", "red"), lty=c(1,1,2,2), lwd=2)
#EXERCISE 2
##---------------------------------------------------------------
## *** LIME, Multiple years, single-fleet
##----------------------------------------------------------------
##----------------------------------------------------------------
## Step 1: Weight length data
##----------------------------------------------------------------
catch <- read.csv("Catch_multifleet.csv", header=TRUE)
data_mymf <- read.csv("Length_multiyear_multifleet.csv", header=TRUE)
years <- unique(data_mymf$Year)
fleets <- unique(data_mymf$Fleet)
cldata <- full_join(data_mymf, catch)
## length comps
lcomps <- cldata %>% select(grep("X", colnames(cldata)))
## observed samples by bin by year
nsamps <- sum(cldata %>% select(grep("X", colnames(cldata))))
## multiply observed number of fish in bins by catch, keep fleet information
lweight1 <- ((cldata %>% select(grep("X", colnames(cldata)))) * cldata$Catch) %>% mutate(Fleet=cldata$Fleet)
## add weighted lengths from each fleet
lweight2 <- ((lweight1 %>% filter(Fleet==1)) + (lweight1 %>% filter(Fleet==2))) %>% select(-Fleet)
## calculate proportions weighted by catch
lweight3 <- matrix(t(sapply(1:length(years), function(x) as.numeric(lweight2[x,]/sum(lweight2[x,])))), nrow=length(years), ncol=length(bins))
LF_new <- lweight3 * nsamps
rownames(LF_new) <- years
colnames(LF_new) <- bins
##----------------------------------------------------------------
## Step 3: Run LIME
##----------------------------------------------------------------
data_list <- list("years"=years, "LF"=LF_new)
## use lh - single fleet
input_data <- create_inputs(lh=lh, input_data=data_list)
res <- run_LIME(modpath=NULL, input=input_data, data_avail="LC")
## check TMB inputs
Inputs <- res$Inputs
## Report file
Report <- res$Report
## Standard error report
Sdreport <- res$Sdreport
## check convergence
hessian <- Sdreport$pdHess
gradient <- res$opt$max_gradient <= 0.001
hessian == TRUE & gradient == TRUE
check <- Check_Identifiable2(res$obj)
##----------------------------------------------------------------
## Step 4: Examine results
##----------------------------------------------------------------
spr <- Report$SPR_t[length(Report$SPR_t)]
## standard error
sd_spr <- summary(Sdreport)[which(rownames(summary(Sdreport))=="SPR_t"),2][length(Report$SPR_t)]
## lower confidence limit
lcl_spr <- max(0,spr - 1.96 * sd_spr)
## upper confidence limit
ucl_spr <- min(1,spr + 1.96 * sd_spr)
save <- rbind.data.frame(save, data.frame("model"="LIME", "run"="multiyear_singlefleet", "spr"=spr[length(spr)], "lcl_spr"=lcl_spr[length(spr)], "ucl_spr"=ucl_spr[length(spr)]))
ggplot(save) +
geom_point(aes(x=run, y=spr, color=model), cex=5) +
geom_linerange(aes(x=run, ymin=lcl_spr, ymax=ucl_spr, color=model)) +
scale_y_continuous(limits=c(0,1)) +
xlab("Run") + ylab("SPR")
plot_LCfits(Inputs=Inputs, Report=Report)
## plot model output
plot_output(Inputs=Inputs,
Report=Report,
Sdreport=Sdreport,
lh=lh,
true_years=years)
abline(v=lh$linf, lwd=2, lty=2, col="red")
abline(v=Report$ML_ft[length(Report$ML_ft)], lwd=2, lty=2, col="blue")
##---------------------------------------------------------------
## *** LBSPR, Multiple years, single-fleet
##----------------------------------------------------------------
LB_lengths <- new("LB_lengths")
LB_lengths@LMids <- bins
LB_lengths@LData <- t(LF_new)
LB_lengths@Years <- years
LB_lengths@NYears <- length(years)
lbspr_res <- LBSPRfit(LB_pars=LB_pars, LB_lengths=LB_lengths, Control=list(modtype=c("GTG")))
spr <- lbspr_res@SPR[length(lbspr_res@SPR)]
sd_spr <- sqrt(lbspr_res@Vars[1,"SPR"])
## lower confidence limit
lcl_spr <- max(0,spr - 1.96 * sd_spr)
## upper confidence limit
ucl_spr <- spr + 1.96 * sd_spr
save <- rbind.data.frame(save, data.frame("model"="LBSPR", "run"="multiyear_singlefleet", "spr"=spr, "lcl_spr"=lcl_spr, "ucl_spr"=ucl_spr))
ggplot(save) +
geom_point(aes(x=run, y=spr, color=model), cex=5) +
geom_linerange(aes(x=run, ymin=lcl_spr, ymax=ucl_spr, color=model)) +
scale_y_continuous(limits=c(0,NA)) +
xlab("Run") + ylab("SPR")
plot_LCfits(Inputs=Inputs, Report=Report, LBSPR=lbspr_res)
## plot model output
plot_output(Inputs=Inputs,
Report=Report,
Sdreport=Sdreport,
lh=lh,
LBSPR=lbspr_res,
true_years=years)
abline(v=lh$linf, lwd=2, lty=2, col="red")
abline(v=Report$ML_ft[length(Report$ML_ft)], lwd=2, lty=2, col="blue")
legend("topleft", legend=c("LIME Fleet 1", "LIME Fleet 2", "LBSPR Selectivity", "Mean length in catch", "Linf"), col=c("red", "blue", "#AA00AA", "blue", "red"), lty=c(1,1,1,2,2), lwd=2)
data_1ymf <- read.csv("Length_multifleet.csv", header=TRUE)
bins <- data_1ymf[,1]
LF <- list()
LF[[1]] <- matrix(data_1ymf[,2], nrow=1, ncol=length(bins))
LF[[2]] <- matrix(data_1ymf[,3], nrow=1, ncol=length(bins))
rownames(LF[[1]]) <- rownames(LF[[2]]) <- "2016"
colnames(LF[[1]]) <- colnames(LF[[2]]) <- bins
LF_mf <- LFreq_df(LF)
plot_LCfits(LF_df=LF_mf)
lh2 <- create_lh_list(vbk=0.117,
linf=38,
t0=-0.01,
lwa=3.4e-5,
lwb=2.87,
M50=32,
M95=34,
maturity_input="length",
M=0.119,
h=0.65,
S50=c(20,25),
S95=c(27,30),
selex_input="length",
selex_type=c("logistic","logistic"),
CVlen=0.1,
SigmaR=0.5,
SigmaF=0.1,
binwidth=2,
nfleets=2)
ggplot(lh2$df %>% dplyr::filter(By=="Age")) +
geom_line(aes(x=X, y=Value, color=Fleet), lwd=2) +
facet_wrap(~Variable, scale="free_y") +
xlab("Age")
data_list <- list("years"=2016, "LF"=LF)
input_data <- create_inputs(lh=lh2, input_data=data_list)
res2 <- run_LIME(modpath=NULL, input=input_data, data_avail="LC", est_totalF=TRUE, LFdist=0, Rdet=TRUE, newtonsteps=3)
Inputs <- res2$Inputs
Report <- res2$Report
Sdreport <- res2$Sdreport
hessian <- Sdreport$pdHess
gradient <- res2$opt$max_gradient <= 0.001
hessian == TRUE & gradient == TRUE
spr <- Report$SPR_t
sd_spr <- summary(Sdreport)[which(rownames(summary(Sdreport))=="SPR_t"),2]
lcl_spr <- max(0,spr - 1.96 * sd_spr)
ucl_spr <- spr + 1.96 * sd_spr
save <- rbind.data.frame(save, data.frame("model"="LIME", "run"="singleyear_multifleet", "spr"=spr, "lcl_spr"=lcl_spr, "ucl_spr"=ucl_spr))
ggplot(save) +
geom_point(aes(x=run, y=spr, color=model), cex=5) +
geom_linerange(aes(x=run, ymin=lcl_spr, ymax=ucl_spr, color=model)) +
scale_y_continuous(limits=c(0,1)) +
xlab("Run") + ylab("SPR")
plot_LCfits(Inputs=Inputs,
Report=Report)
plot_output(Inputs=Inputs,
Report=Report,
Sdreport=Sdreport,
lh=lh2,
LBSPR=lbspr_res,
true_years=data_list$years,
plot=c("Selex"))
abline(v=lh$linf, lwd=2, lty=2, col="red")
abline(v=Report$ML_ft[length(Report$ML_ft)], lwd=2, lty=2, col="blue")
legend("topleft", legend=c("LIME Fleet 1", "LIME Fleet 2", "LBSPR Selectivity", "Mean length in catch", "Linf"), col=c("red", "blue", "#AA00AA", "blue", "red"), lty=c(1,1,1,2,2), lwd=2)
LF1 <- as.matrix(data_mymf %>% filter(Fleet==1) %>% select(-c(Fleet, Year)))
LF2 <- as.matrix(data_mymf %>% filter(Fleet==2) %>% select(-c(Fleet, Year)))
LFmymf <- list()
LFmymf[[1]] <- LF1
LFmymf[[2]] <- LF2
for(i in 1:2){
rownames(LFmymf[[i]]) <- years
colnames(LFmymf[[i]]) <- bins
}
LF_mf_my <- LFreq_df(LFmymf)
plot_LCfits(LF_df=LF_mf_my)
data_list <- list("years"=years, "LF"=LFmymf)
input_data <- create_inputs(lh=lh2, input_data=data_list)
input_data$SigmaF <- 0.025
res <- run_LIME(modpath=NULL, input=input_data, data_avail="LC", LFdist=0, est_totalF=TRUE)
Inputs <- res$Inputs
Report <- res$Report
Sdreport <- res$Sdreport
hessian <- Sdreport$pdHess
gradient <- res$opt$max_gradient <= 0.001
hessian == TRUE & gradient == TRUE
spr <- Report$SPR_t[length(Report$SPR_t)]
sd_spr <- summary(Sdreport)[which(rownames(summary(Sdreport))=="SPR_t"),2][length(Report$SPR_t)]
lcl_spr <- max(0,spr - 1.96 * sd_spr)
ucl_spr <- min(1,spr + 1.96 * sd_spr)
save <- rbind.data.frame(save, data.frame("model"="LIME", "run"="multiyear_multifleet", "spr"=spr[length(spr)], "lcl_spr"=lcl_spr[length(spr)], "ucl_spr"=ucl_spr[length(spr)]))
ggplot(save) +
geom_point(aes(x=run, y=spr, color=model), cex=5) +
geom_linerange(aes(x=run, ymin=lcl_spr, ymax=ucl_spr, color=model)) +
scale_y_continuous(limits=c(0,NA)) +
xlab("Run") + ylab("SPR")
plot_LCfits(Inputs=Inputs, Report=Report)
plot_output(Inputs=Inputs,
Report=Report,
Sdreport=Sdreport,
lh=lh2,
LBSPR=lbspr_res,
true_years=years)
abline(v=lh$linf, lwd=2, lty=2, col="red")
abline(v=Report$ML_ft[length(Report$ML_ft)], lwd=2, lty=2, col="blue")
shiny::runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
x<-c(0.07198136, 0.05109000, 0.05317208, 0.05400000,rep(NA,15))
x
z<-c(rep("Amax",4),rep("VBGF",4),rep("VBGF:Temp",2),"VBGF;Amat",rep("Amat",3),rep("Weight",3),rep("GSI",1),"User input")
y<-c("Then_Amax 1","Then_Amax 2","Then_Amax 3","Hamel_Amax","AnC","Then_VBGF","Jensen_VBGF 1","Jensen_VBGF 2","Pauly_lt","Gislason","Chen-Wat","Roff","Jensen_Amat","Ri_Ef_Amat","Pauly_wt","PnW","Lorenzen","GSI","User input")
M_vals_gg<-as.data.frame(cbind(M_vals_all,M_methods,M.types))
xx<-as.data.frame(cbind(x,y,z))
xx
colnames(xx)<-c("Mvals","Mmeth","Mtype")
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point()
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point()+ylab("M")
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point()+ylab("M")+xlab("Method")
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+opts(axis.text.x=theme_text(angle=-90))
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+axis.text.x=theme_text(angle=-90)
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90))
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 2))
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(xx,aes(Mmeth,as.numeric(as.character(Mvals)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
M_vals_gg<-as.data.frame(cbind(M_vals_all,M_methods,M.types),stringsAsFactors=FALSE)
xx<-as.data.frame(cbind(x,y,z),stringsAsFactors=FALSE)
xx
class(xx$y)
class(xx$x)
class(xx$z)
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$MMeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype)))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
)
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$MMeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
xx$Mmeth
xx
colnames(xx)<-c("Mvals","Mmeth","Mtype")
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+guides(fill=guide_legend(title="Type"))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+guides(fill=guide_legend(title="NULL"Method"))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+guides(fill=guide_legend(title="Method"))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+guides(fill=guide_legend(title="Method"))+theme(legend.title="Method")
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+scale_fill_manual(name=Method)
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+scale_fill_manual(name="Method")
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+scale_fill_manual(name="Type")
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+scale_fill_discrete(name="Experimental\nCondition")
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+scale_fill_discrete(name = "New Legend Title")
xx$Mmeth<-factor(Mmeth,levels=unique(xx$Mmeth))
xx$Mtype<-factor(Mtype,levels=unique(xx$Mtype))
xx
names(xx)
xx$Mmeth<-factor(xx$Mmeth,levels=unique(xx$Mmeth))
xx$Mtype<-factor(xx$Mtype,levels=unique(xx$Mtype))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),as.numeric(Mvals),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+scale_fill_discrete(name = "New Legend Title")
ggplot(xx,aes(Mmeth,as.numeric(Mvals),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+scale_fill_discrete(name = "New Legend Title")
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),rep(NA,19),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
x<-rep(NA,19)
xx<-as.data.frame(cbind(x,y,z))
xx$Mtype<-factor(xx$Mtype,levels=unique(xx$Mtype))
colnames(xx)<-c("Mvals","Mmeth","Mtype")
xx$Mtype<-factor(xx$Mtype,levels=unique(xx$Mtype))
xx$Mmeth<-factor(xx$Mmeth,levels=unique(xx$Mmeth))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),rep(NA,19),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),rep(NA,19),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+ylim(0,0,5)
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),rep(NA,19),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))+ylim(0,0.5)
ggplot(xx,aes(factor(Mmeth,levels=unique(xx$Mmeth)),rep(NA,19),color=factor(Mtype,levels=unique(xx$Mtype))))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
runApp('~/GitHub/Natural-Mortality-Tool')
ggplot(xx,aes(Mmeth,rep(NA,19),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
ggplot(xx,aes(Mmeth,as.numeric(rep(NA,19)),color=Mtype))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
xx
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
x
M_vals_all<-c(0.07198136, 0.05109000, 0.05317208, 0.05400000,rep(NA,15))
M_methods<-c("Then_Amax 1","Then_Amax 2","Then_Amax 3","Hamel_Amax","AnC","Then_VBGF","Jensen_VBGF 1","Jensen_VBGF 2","Pauly_lt","Gislason","Chen-Wat","Roff","Jensen_Amat","Ri_Ef_Amat","Pauly_wt","PnW","Lorenzen","GSI","User input")
M_types<-c(rep("Amax",4),rep("VBGF",4),rep("VBGF:Temp",2),"VBGF;Amat",rep("Amat",3),rep("Weight",3),rep("GSI",1),"User input")
M_vals_gg<-as.data.frame(cbind(M_vals_all,M_methods,M_types))
colnames(M_vals_gg)<-c("M","Method","Input")
M_vals_gg$Method<-factor(M_vals_gg$Method,levels=unique(M_vals_gg$Method))
M_vals_gg$Input<-factor(M_vals_gg$Input,levels=unique(M_vals_gg$Input))
if(all(is.na(M_vals_all))){ymax<-0.5}
if(!(all(is.na(M_vals_all)))){ymax<-ceiling((max(M_vals_all,na.rm=TRUE)*1.1*10))/10}
ymax
ggplot(M_vals_gg,aes(Method,as.numeric(as.character(M)),color=Input))+geom_point(size=2)+ylab("M")+xlab("Method")+theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=0.5))
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
library("devtools")
install_github("James-Thorson/CCSRA")
library(CCSRA)
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/Natural-Mortality-Tool')
runGitHub( "Natural-Mortality-Tool", "shcaba")
runGitHub( "Natural-Mortality-Tool", "shcaba")
library(FishLife)
BRF_ex<-Plot_taxa(Search_species(Genus="Sebastes",Species="mystinus")$match_taxonomy, mfrow=c(2,2) )
BRF_ex
median_M<-exp(BRF_ex[[1]]$Mean_pred[6])
median_M
median_K<-exp(BRF_ex[[1]]$Mean_pred[2])
median_Linf<-exp(BRF_ex[[1]]$Mean_pred[1])
median_M/median_K
runApp('~/GitHub/Natural-Mortality-Tool')
runApp('~/GitHub/VBGF_IGOR/Shiny_IGOR')
library(DLMtool)
avail('Data')
Atlantic_mackerel
Atlantic_mackerel@Cat
Atlantic_mackerel@Mort
setwd("C:/Users/Jason.Cope/Documents/GitHub/Shiny_DLMtool/")
Ex_dlm.data<-new("Data",stock="DLM_objects_examples/Example_datafile.csv")
Ex_dlm.data
Ex_dlm.data$Cat
Ex_dlm.data@Cat
slotNames(Ex_dlm.data) #checks object inputs
summary(Ex_dlm.data) #Plots summary of removals, abundnace indices and input priors
Can(Ex_dlm.data)   #Methods that can be used
Cant(Ex_dlm.data)  #Methods that cannot be use
Ex_dlm.data.TAC<-TAC(Ex_dlm.data)
plot(Ex_dlm.data.TAC)
?TAC
Ex_dlm.data.TAC<-TAC(Ex_dlm.data,reps=200)
plot(Ex_dlm.data.TAC)
library(DLMtool)
library(ggplot2)
setwd("C:/Users/Jason.Cope/Documents/GitHub/Shiny_DLMtool/")
Ex_dlm.data<-new("Data",stock="DLM_objects_examples/Example_datafile.csv")
?Itarget1
I_TAC_y_2<-I_TAC_y_15<-I_TAC_y_1<-rep(NA,6)
for(i in 2:7)
{
I_TAC_y_1[i-1]<-median(Itarget1(x=1, Ex_dlm.data, reps = 1000, yrsmth = i, Imulti=1)@TAC,na.rm = T)
I_TAC_y_15[i-1]<-median(Itarget1(x=1, Ex_dlm.data, reps = 1000, yrsmth = i, Imulti=1.5)@TAC,na.rm = T)
I_TAC_y_2[i-1]<-median(Itarget1(x=1, Ex_dlm.data, reps = 1000, yrsmth = i, Imulti=2)@TAC,na.rm = T)
}
I.1<-as.data.frame(cbind(I_TAC_y_1,c(2:7),1))
I.1.5<-as.data.frame(cbind(I_TAC_y_15,c(2:7),1.5))
I.2<-as.data.frame(cbind(I_TAC_y_2,c(2:7),2))
colnames(I.2)<-colnames(I.1.5)<-colnames(I.1)<-c("TAC","yrsmth","Imulti")
Ind.out<-rbind(I.1,I.1.5,I.2)
ggplot(Ind.out,aes(yrsmth,TAC,color=factor(Imulti)))+geom_point(size = 2)+ylim(0,10)
I1_TAC<-I2_TAC<-I3_TAC<-I4_TAC<-rep(NA,6)
for(i in 2:7)
{
I1_TAC[i-1]<-median(Itarget1(x=1, Ex_dlm.data, reps = 1000, yrsmth = i, Imulti=1.5)@TAC,na.rm = T)
I2_TAC[i-1]<-median(Itarget2(x=1, Ex_dlm.data, reps = 1000, yrsmth = i, Imulti=1.5)@TAC,na.rm = T)
I3_TAC[i-1]<-median(Itarget3(x=1, Ex_dlm.data, reps = 1000, yrsmth = i, Imulti=1.5)@TAC,na.rm = T)
I4_TAC[i-1]<-median(Itarget4(x=1, Ex_dlm.data, reps = 1000, yrsmth = i, Imulti=1.5)@TAC,na.rm = T)
}
I.1<-as.data.frame(cbind(I1_TAC,c(2:7),1))
I.2<-as.data.frame(cbind(I2_TAC,c(2:7),2))
I.3<-as.data.frame(cbind(I3_TAC,c(2:7),3))
I.4<-as.data.frame(cbind(I4_TAC,c(2:7),4))
colnames(I.4)<-colnames(I.3)<-colnames(I.2)<-colnames(I.1)<-c("TAC","yrsmth","Imulti")
Ind.out2<-rbind(I.1,I.2,I.3,I.4)
ggplot(Ind.out2,aes(yrsmth,TAC,color=factor(Imulti)))+geom_point(size = 2)+ylim(0,10)
ORCS_refined<-function(x,Data,reps=100,stock.cat=3)
{
Ct.in<-mapply(function(xx) rlnorm(reps,log(Data@Cat[x,xx]),Data@CV_Cat),xx=1:length(Data@Cat[1,]))
scalar<-c(2,1.22,0.41)
Rec <- new("Rec")
Rec@TAC<-apply(Ct.in,1,quantile,0.1)*scalar[stock.cat]
Rec
}
class(ORCS_refined)<-"MP"
setup()
sfExport('ORCS_refined')
runApp()
ORCS_refined<-function(x,Data,reps=100,stock.cat=3)
{
Ct.in<-mapply(function(xx) rlnorm(reps,log(Data@Cat[x,xx]),Data@CV_Cat),xx=1:length(Data@Cat[1,]))
scalar<-c(2,1.22,0.41)
Rec <- new("Rec")
Rec@TAC<-apply(Ct.in,1,quantile,0.1)*scalar[stock.cat]
Rec
}
ORCS_refined(1,Red_snapper,reps=5,stock.cat=1)@TAC
class(ORCS_refined)<-"MP"
environment(ORCS_refined) <- asNamespace('DLMtool')
Can(Red_snapper)
runApp()
library(LIME)
library(ggplot2)
library(dplyr)
